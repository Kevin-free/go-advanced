// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: biohouse.proto

package biohouse

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathBiohouseReqPing = "/Biohouse/ReqPing"
var PathBiohouseReqLogin = "/Biohouse/ReqLogin"
var PathBiohouseReqLogout = "/Biohouse/ReqLogout"
var PathBiohouseReqAttack = "/Biohouse/ReqAttack"
var PathBiohouseReqMaterial = "/Biohouse/ReqMaterial"
var PathBiohouseReqChangeEquipWeaponID = "/Biohouse/ReqChangeEquipWeaponID"
var PathBiohouseReqChangeHandWeapon = "/Biohouse/ReqChangeHandWeapon"
var PathBiohouseReqChangeWeaponPart = "/Biohouse/ReqChangeWeaponPart"
var PathBiohouseReqUpgradeWeaponPart = "/Biohouse/ReqUpgradeWeaponPart"
var PathBiohouseReqWeaponReload = "/Biohouse/ReqWeaponReload"
var PathBiohouseReqAimMove = "/Biohouse/ReqAimMove"
var PathBiohouseReqAttackNull = "/Biohouse/ReqAttackNull"
var PathBiohouseReqChangeRatio = "/Biohouse/ReqChangeRatio"
var PathBiohouseReqEnterTable = "/Biohouse/ReqEnterTable"
var PathBiohouseReqLeaveTable = "/Biohouse/ReqLeaveTable"
var PathBiohouseReqUseSkill = "/Biohouse/ReqUseSkill"
var PathBiohouseReqHurtPlayer = "/Biohouse/ReqHurtPlayer"
var PathBiohouseReqPlayerHPChange = "/Biohouse/ReqPlayerHPChange"

// BiohouseBMServer is the server API for Biohouse service.
type BiohouseBMServer interface {
	ReqPing(ctx context.Context, req *CSPing) (resp *SCPing, err error)

	ReqLogin(ctx context.Context, req *CSLogin) (resp *SCLogin, err error)

	ReqLogout(ctx context.Context, req *CSLogout) (resp *SCLogout, err error)

	ReqAttack(ctx context.Context, req *CSAttack) (resp *SCAttack, err error)

	ReqMaterial(ctx context.Context, req *CSMaterial) (resp *SCMaterial, err error)

	ReqChangeEquipWeaponID(ctx context.Context, req *CSChangeEquipWeaponID) (resp *SCChangeEquipWeaponID, err error)

	ReqChangeHandWeapon(ctx context.Context, req *CSChangeHandWeapon) (resp *SCChangeHandWeapon, err error)

	ReqChangeWeaponPart(ctx context.Context, req *CSChangeWeaponPart) (resp *SCChangeWeaponPart, err error)

	ReqUpgradeWeaponPart(ctx context.Context, req *CSUpgradeWeaponPart) (resp *SCUpgradeWeaponPart, err error)

	ReqWeaponReload(ctx context.Context, req *CSWeaponReload) (resp *SCWeaponReload, err error)

	ReqAimMove(ctx context.Context, req *CSAimMove) (resp *SCAimMove, err error)

	ReqAttackNull(ctx context.Context, req *CSAttackNull) (resp *SCAttackNull, err error)

	ReqChangeRatio(ctx context.Context, req *CSChangeRatio) (resp *SCChangeRatio, err error)

	ReqEnterTable(ctx context.Context, req *CSEnterTable) (resp *SCEnterTable, err error)

	ReqLeaveTable(ctx context.Context, req *CSLeaveTable) (resp *SCLeaveTable, err error)

	ReqUseSkill(ctx context.Context, req *CSUseSkill) (resp *SCUseSkill, err error)

	ReqHurtPlayer(ctx context.Context, req *CSHurtPlayer) (resp *SCHurtPlayer, err error)

	ReqPlayerHPChange(ctx context.Context, req *CSPlayerHPChange) (resp *SCPlayerHPChange, err error)
}

var BiohouseSvc BiohouseBMServer

func biohouseReqPing(c *bm.Context) {
	p := new(CSPing)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := BiohouseSvc.ReqPing(c, p)
	c.JSON(resp, err)
}

func biohouseReqLogin(c *bm.Context) {
	p := new(CSLogin)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := BiohouseSvc.ReqLogin(c, p)
	c.JSON(resp, err)
}

func biohouseReqLogout(c *bm.Context) {
	p := new(CSLogout)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := BiohouseSvc.ReqLogout(c, p)
	c.JSON(resp, err)
}

func biohouseReqAttack(c *bm.Context) {
	p := new(CSAttack)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := BiohouseSvc.ReqAttack(c, p)
	c.JSON(resp, err)
}

func biohouseReqMaterial(c *bm.Context) {
	p := new(CSMaterial)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := BiohouseSvc.ReqMaterial(c, p)
	c.JSON(resp, err)
}

func biohouseReqChangeEquipWeaponID(c *bm.Context) {
	p := new(CSChangeEquipWeaponID)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := BiohouseSvc.ReqChangeEquipWeaponID(c, p)
	c.JSON(resp, err)
}

func biohouseReqChangeHandWeapon(c *bm.Context) {
	p := new(CSChangeHandWeapon)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := BiohouseSvc.ReqChangeHandWeapon(c, p)
	c.JSON(resp, err)
}

func biohouseReqChangeWeaponPart(c *bm.Context) {
	p := new(CSChangeWeaponPart)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := BiohouseSvc.ReqChangeWeaponPart(c, p)
	c.JSON(resp, err)
}

func biohouseReqUpgradeWeaponPart(c *bm.Context) {
	p := new(CSUpgradeWeaponPart)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := BiohouseSvc.ReqUpgradeWeaponPart(c, p)
	c.JSON(resp, err)
}

func biohouseReqWeaponReload(c *bm.Context) {
	p := new(CSWeaponReload)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := BiohouseSvc.ReqWeaponReload(c, p)
	c.JSON(resp, err)
}

func biohouseReqAimMove(c *bm.Context) {
	p := new(CSAimMove)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := BiohouseSvc.ReqAimMove(c, p)
	c.JSON(resp, err)
}

func biohouseReqAttackNull(c *bm.Context) {
	p := new(CSAttackNull)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := BiohouseSvc.ReqAttackNull(c, p)
	c.JSON(resp, err)
}

func biohouseReqChangeRatio(c *bm.Context) {
	p := new(CSChangeRatio)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := BiohouseSvc.ReqChangeRatio(c, p)
	c.JSON(resp, err)
}

func biohouseReqEnterTable(c *bm.Context) {
	p := new(CSEnterTable)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := BiohouseSvc.ReqEnterTable(c, p)
	c.JSON(resp, err)
}

func biohouseReqLeaveTable(c *bm.Context) {
	p := new(CSLeaveTable)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := BiohouseSvc.ReqLeaveTable(c, p)
	c.JSON(resp, err)
}

func biohouseReqUseSkill(c *bm.Context) {
	p := new(CSUseSkill)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := BiohouseSvc.ReqUseSkill(c, p)
	c.JSON(resp, err)
}

func biohouseReqHurtPlayer(c *bm.Context) {
	p := new(CSHurtPlayer)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := BiohouseSvc.ReqHurtPlayer(c, p)
	c.JSON(resp, err)
}

func biohouseReqPlayerHPChange(c *bm.Context) {
	p := new(CSPlayerHPChange)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := BiohouseSvc.ReqPlayerHPChange(c, p)
	c.JSON(resp, err)
}

// RegisterBiohouseBMServer Register the blademaster route
func RegisterBiohouseBMServer(e *bm.Engine, server BiohouseBMServer) {
	BiohouseSvc = server
	e.POST("/Biohouse/ReqPing", biohouseReqPing)
	e.POST("/Biohouse/ReqLogin", biohouseReqLogin)
	e.POST("/Biohouse/ReqLogout", biohouseReqLogout)
	e.POST("/Biohouse/ReqAttack", biohouseReqAttack)
	e.POST("/Biohouse/ReqMaterial", biohouseReqMaterial)
	e.POST("/Biohouse/ReqChangeEquipWeaponID", biohouseReqChangeEquipWeaponID)
	e.POST("/Biohouse/ReqChangeHandWeapon", biohouseReqChangeHandWeapon)
	e.POST("/Biohouse/ReqChangeWeaponPart", biohouseReqChangeWeaponPart)
	e.POST("/Biohouse/ReqUpgradeWeaponPart", biohouseReqUpgradeWeaponPart)
	e.POST("/Biohouse/ReqWeaponReload", biohouseReqWeaponReload)
	e.POST("/Biohouse/ReqAimMove", biohouseReqAimMove)
	e.POST("/Biohouse/ReqAttackNull", biohouseReqAttackNull)
	e.POST("/Biohouse/ReqChangeRatio", biohouseReqChangeRatio)
	e.POST("/Biohouse/ReqEnterTable", biohouseReqEnterTable)
	e.POST("/Biohouse/ReqLeaveTable", biohouseReqLeaveTable)
	e.POST("/Biohouse/ReqUseSkill", biohouseReqUseSkill)
	e.POST("/Biohouse/ReqHurtPlayer", biohouseReqHurtPlayer)
	e.POST("/Biohouse/ReqPlayerHPChange", biohouseReqPlayerHPChange)
}
