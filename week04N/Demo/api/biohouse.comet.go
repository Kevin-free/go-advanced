// Code generated by protoc-gen-comet v0.1, DO NOT EDIT.
// source: biohouse.proto

package biohouse

import (
	"context"

	"git.huoys.com/middle-end/library/pkg/net/comet"
	"github.com/golang/protobuf/proto"
)

// BiohouseCometServer is the server API for Biohouse service.
type BiohouseCometServer interface {
	SetCometChan(cl *comet.ChanList, cs *comet.Server)
	ReqPing(ctx context.Context, req *CSPing) (resp *SCPing, err error)

	ReqLogin(ctx context.Context, req *CSLogin) (resp *SCLogin, err error)

	ReqLogout(ctx context.Context, req *CSLogout) (resp *SCLogout, err error)

	ReqAttack(ctx context.Context, req *CSAttack) (resp *SCAttack, err error)

	ReqMaterial(ctx context.Context, req *CSMaterial) (resp *SCMaterial, err error)

	ReqChangeEquipWeaponID(ctx context.Context, req *CSChangeEquipWeaponID) (resp *SCChangeEquipWeaponID, err error)

	ReqChangeHandWeapon(ctx context.Context, req *CSChangeHandWeapon) (resp *SCChangeHandWeapon, err error)

	ReqChangeWeaponPart(ctx context.Context, req *CSChangeWeaponPart) (resp *SCChangeWeaponPart, err error)

	ReqUpgradeWeaponPart(ctx context.Context, req *CSUpgradeWeaponPart) (resp *SCUpgradeWeaponPart, err error)

	ReqWeaponReload(ctx context.Context, req *CSWeaponReload) (resp *SCWeaponReload, err error)

	ReqAimMove(ctx context.Context, req *CSAimMove) (resp *SCAimMove, err error)

	ReqAttackNull(ctx context.Context, req *CSAttackNull) (resp *SCAttackNull, err error)

	ReqChangeRatio(ctx context.Context, req *CSChangeRatio) (resp *SCChangeRatio, err error)

	ReqEnterTable(ctx context.Context, req *CSEnterTable) (resp *SCEnterTable, err error)

	ReqLeaveTable(ctx context.Context, req *CSLeaveTable) (resp *SCLeaveTable, err error)

	ReqUseSkill(ctx context.Context, req *CSUseSkill) (resp *SCUseSkill, err error)

	ReqHurtPlayer(ctx context.Context, req *CSHurtPlayer) (resp *SCHurtPlayer, err error)

	ReqPlayerHPChange(ctx context.Context, req *CSPlayerHPChange) (resp *SCPlayerHPChange, err error)
}

func RegisterBiohouseCometServer(s *comet.Server, srv BiohouseCometServer) {
	chanList := s.RegisterService(&_Comet_Biohouse_serviceDesc, srv)
	srv.SetCometChan(chanList, s)
}

func _Comet_Biohouse_ReqPing_Handler(srv interface{}, ctx context.Context, data []byte, interceptor comet.UnaryServerInterceptor) ([]byte, error) {
	in := new(CSPing)
	err := proto.Unmarshal(data, in)
	if err = proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		out, err := srv.(BiohouseCometServer).ReqPing(ctx, in)
		data, _ := proto.Marshal(out)
		return data, err
	}
	info := &comet.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biohouse.Biohouse/ReqPing",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		out, err := srv.(BiohouseCometServer).ReqPing(ctx, req.(*CSPing))
		if out != nil {
			data, _ := proto.Marshal(out)
			return data, err
		}
		return nil, err
	}
	return interceptor(ctx, in, info, handler)
}
func _Comet_Biohouse_ReqLogin_Handler(srv interface{}, ctx context.Context, data []byte, interceptor comet.UnaryServerInterceptor) ([]byte, error) {
	in := new(CSLogin)
	err := proto.Unmarshal(data, in)
	if err = proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		out, err := srv.(BiohouseCometServer).ReqLogin(ctx, in)
		data, _ := proto.Marshal(out)
		return data, err
	}
	info := &comet.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biohouse.Biohouse/ReqLogin",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		out, err := srv.(BiohouseCometServer).ReqLogin(ctx, req.(*CSLogin))
		if out != nil {
			data, _ := proto.Marshal(out)
			return data, err
		}
		return nil, err
	}
	return interceptor(ctx, in, info, handler)
}
func _Comet_Biohouse_ReqLogout_Handler(srv interface{}, ctx context.Context, data []byte, interceptor comet.UnaryServerInterceptor) ([]byte, error) {
	in := new(CSLogout)
	err := proto.Unmarshal(data, in)
	if err = proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		out, err := srv.(BiohouseCometServer).ReqLogout(ctx, in)
		data, _ := proto.Marshal(out)
		return data, err
	}
	info := &comet.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biohouse.Biohouse/ReqLogout",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		out, err := srv.(BiohouseCometServer).ReqLogout(ctx, req.(*CSLogout))
		if out != nil {
			data, _ := proto.Marshal(out)
			return data, err
		}
		return nil, err
	}
	return interceptor(ctx, in, info, handler)
}
func _Comet_Biohouse_ReqAttack_Handler(srv interface{}, ctx context.Context, data []byte, interceptor comet.UnaryServerInterceptor) ([]byte, error) {
	in := new(CSAttack)
	err := proto.Unmarshal(data, in)
	if err = proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		out, err := srv.(BiohouseCometServer).ReqAttack(ctx, in)
		data, _ := proto.Marshal(out)
		return data, err
	}
	info := &comet.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biohouse.Biohouse/ReqAttack",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		out, err := srv.(BiohouseCometServer).ReqAttack(ctx, req.(*CSAttack))
		if out != nil {
			data, _ := proto.Marshal(out)
			return data, err
		}
		return nil, err
	}
	return interceptor(ctx, in, info, handler)
}
func _Comet_Biohouse_ReqMaterial_Handler(srv interface{}, ctx context.Context, data []byte, interceptor comet.UnaryServerInterceptor) ([]byte, error) {
	in := new(CSMaterial)
	err := proto.Unmarshal(data, in)
	if err = proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		out, err := srv.(BiohouseCometServer).ReqMaterial(ctx, in)
		data, _ := proto.Marshal(out)
		return data, err
	}
	info := &comet.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biohouse.Biohouse/ReqMaterial",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		out, err := srv.(BiohouseCometServer).ReqMaterial(ctx, req.(*CSMaterial))
		if out != nil {
			data, _ := proto.Marshal(out)
			return data, err
		}
		return nil, err
	}
	return interceptor(ctx, in, info, handler)
}
func _Comet_Biohouse_ReqChangeEquipWeaponID_Handler(srv interface{}, ctx context.Context, data []byte, interceptor comet.UnaryServerInterceptor) ([]byte, error) {
	in := new(CSChangeEquipWeaponID)
	err := proto.Unmarshal(data, in)
	if err = proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		out, err := srv.(BiohouseCometServer).ReqChangeEquipWeaponID(ctx, in)
		data, _ := proto.Marshal(out)
		return data, err
	}
	info := &comet.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biohouse.Biohouse/ReqChangeEquipWeaponID",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		out, err := srv.(BiohouseCometServer).ReqChangeEquipWeaponID(ctx, req.(*CSChangeEquipWeaponID))
		if out != nil {
			data, _ := proto.Marshal(out)
			return data, err
		}
		return nil, err
	}
	return interceptor(ctx, in, info, handler)
}
func _Comet_Biohouse_ReqChangeHandWeapon_Handler(srv interface{}, ctx context.Context, data []byte, interceptor comet.UnaryServerInterceptor) ([]byte, error) {
	in := new(CSChangeHandWeapon)
	err := proto.Unmarshal(data, in)
	if err = proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		out, err := srv.(BiohouseCometServer).ReqChangeHandWeapon(ctx, in)
		data, _ := proto.Marshal(out)
		return data, err
	}
	info := &comet.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biohouse.Biohouse/ReqChangeHandWeapon",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		out, err := srv.(BiohouseCometServer).ReqChangeHandWeapon(ctx, req.(*CSChangeHandWeapon))
		if out != nil {
			data, _ := proto.Marshal(out)
			return data, err
		}
		return nil, err
	}
	return interceptor(ctx, in, info, handler)
}
func _Comet_Biohouse_ReqChangeWeaponPart_Handler(srv interface{}, ctx context.Context, data []byte, interceptor comet.UnaryServerInterceptor) ([]byte, error) {
	in := new(CSChangeWeaponPart)
	err := proto.Unmarshal(data, in)
	if err = proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		out, err := srv.(BiohouseCometServer).ReqChangeWeaponPart(ctx, in)
		data, _ := proto.Marshal(out)
		return data, err
	}
	info := &comet.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biohouse.Biohouse/ReqChangeWeaponPart",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		out, err := srv.(BiohouseCometServer).ReqChangeWeaponPart(ctx, req.(*CSChangeWeaponPart))
		if out != nil {
			data, _ := proto.Marshal(out)
			return data, err
		}
		return nil, err
	}
	return interceptor(ctx, in, info, handler)
}
func _Comet_Biohouse_ReqUpgradeWeaponPart_Handler(srv interface{}, ctx context.Context, data []byte, interceptor comet.UnaryServerInterceptor) ([]byte, error) {
	in := new(CSUpgradeWeaponPart)
	err := proto.Unmarshal(data, in)
	if err = proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		out, err := srv.(BiohouseCometServer).ReqUpgradeWeaponPart(ctx, in)
		data, _ := proto.Marshal(out)
		return data, err
	}
	info := &comet.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biohouse.Biohouse/ReqUpgradeWeaponPart",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		out, err := srv.(BiohouseCometServer).ReqUpgradeWeaponPart(ctx, req.(*CSUpgradeWeaponPart))
		if out != nil {
			data, _ := proto.Marshal(out)
			return data, err
		}
		return nil, err
	}
	return interceptor(ctx, in, info, handler)
}
func _Comet_Biohouse_ReqWeaponReload_Handler(srv interface{}, ctx context.Context, data []byte, interceptor comet.UnaryServerInterceptor) ([]byte, error) {
	in := new(CSWeaponReload)
	err := proto.Unmarshal(data, in)
	if err = proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		out, err := srv.(BiohouseCometServer).ReqWeaponReload(ctx, in)
		data, _ := proto.Marshal(out)
		return data, err
	}
	info := &comet.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biohouse.Biohouse/ReqWeaponReload",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		out, err := srv.(BiohouseCometServer).ReqWeaponReload(ctx, req.(*CSWeaponReload))
		if out != nil {
			data, _ := proto.Marshal(out)
			return data, err
		}
		return nil, err
	}
	return interceptor(ctx, in, info, handler)
}
func _Comet_Biohouse_ReqAimMove_Handler(srv interface{}, ctx context.Context, data []byte, interceptor comet.UnaryServerInterceptor) ([]byte, error) {
	in := new(CSAimMove)
	err := proto.Unmarshal(data, in)
	if err = proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		out, err := srv.(BiohouseCometServer).ReqAimMove(ctx, in)
		data, _ := proto.Marshal(out)
		return data, err
	}
	info := &comet.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biohouse.Biohouse/ReqAimMove",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		out, err := srv.(BiohouseCometServer).ReqAimMove(ctx, req.(*CSAimMove))
		if out != nil {
			data, _ := proto.Marshal(out)
			return data, err
		}
		return nil, err
	}
	return interceptor(ctx, in, info, handler)
}
func _Comet_Biohouse_ReqAttackNull_Handler(srv interface{}, ctx context.Context, data []byte, interceptor comet.UnaryServerInterceptor) ([]byte, error) {
	in := new(CSAttackNull)
	err := proto.Unmarshal(data, in)
	if err = proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		out, err := srv.(BiohouseCometServer).ReqAttackNull(ctx, in)
		data, _ := proto.Marshal(out)
		return data, err
	}
	info := &comet.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biohouse.Biohouse/ReqAttackNull",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		out, err := srv.(BiohouseCometServer).ReqAttackNull(ctx, req.(*CSAttackNull))
		if out != nil {
			data, _ := proto.Marshal(out)
			return data, err
		}
		return nil, err
	}
	return interceptor(ctx, in, info, handler)
}
func _Comet_Biohouse_ReqChangeRatio_Handler(srv interface{}, ctx context.Context, data []byte, interceptor comet.UnaryServerInterceptor) ([]byte, error) {
	in := new(CSChangeRatio)
	err := proto.Unmarshal(data, in)
	if err = proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		out, err := srv.(BiohouseCometServer).ReqChangeRatio(ctx, in)
		data, _ := proto.Marshal(out)
		return data, err
	}
	info := &comet.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biohouse.Biohouse/ReqChangeRatio",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		out, err := srv.(BiohouseCometServer).ReqChangeRatio(ctx, req.(*CSChangeRatio))
		if out != nil {
			data, _ := proto.Marshal(out)
			return data, err
		}
		return nil, err
	}
	return interceptor(ctx, in, info, handler)
}
func _Comet_Biohouse_ReqEnterTable_Handler(srv interface{}, ctx context.Context, data []byte, interceptor comet.UnaryServerInterceptor) ([]byte, error) {
	in := new(CSEnterTable)
	err := proto.Unmarshal(data, in)
	if err = proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		out, err := srv.(BiohouseCometServer).ReqEnterTable(ctx, in)
		data, _ := proto.Marshal(out)
		return data, err
	}
	info := &comet.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biohouse.Biohouse/ReqEnterTable",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		out, err := srv.(BiohouseCometServer).ReqEnterTable(ctx, req.(*CSEnterTable))
		if out != nil {
			data, _ := proto.Marshal(out)
			return data, err
		}
		return nil, err
	}
	return interceptor(ctx, in, info, handler)
}
func _Comet_Biohouse_ReqLeaveTable_Handler(srv interface{}, ctx context.Context, data []byte, interceptor comet.UnaryServerInterceptor) ([]byte, error) {
	in := new(CSLeaveTable)
	err := proto.Unmarshal(data, in)
	if err = proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		out, err := srv.(BiohouseCometServer).ReqLeaveTable(ctx, in)
		data, _ := proto.Marshal(out)
		return data, err
	}
	info := &comet.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biohouse.Biohouse/ReqLeaveTable",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		out, err := srv.(BiohouseCometServer).ReqLeaveTable(ctx, req.(*CSLeaveTable))
		if out != nil {
			data, _ := proto.Marshal(out)
			return data, err
		}
		return nil, err
	}
	return interceptor(ctx, in, info, handler)
}
func _Comet_Biohouse_ReqUseSkill_Handler(srv interface{}, ctx context.Context, data []byte, interceptor comet.UnaryServerInterceptor) ([]byte, error) {
	in := new(CSUseSkill)
	err := proto.Unmarshal(data, in)
	if err = proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		out, err := srv.(BiohouseCometServer).ReqUseSkill(ctx, in)
		data, _ := proto.Marshal(out)
		return data, err
	}
	info := &comet.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biohouse.Biohouse/ReqUseSkill",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		out, err := srv.(BiohouseCometServer).ReqUseSkill(ctx, req.(*CSUseSkill))
		if out != nil {
			data, _ := proto.Marshal(out)
			return data, err
		}
		return nil, err
	}
	return interceptor(ctx, in, info, handler)
}
func _Comet_Biohouse_ReqHurtPlayer_Handler(srv interface{}, ctx context.Context, data []byte, interceptor comet.UnaryServerInterceptor) ([]byte, error) {
	in := new(CSHurtPlayer)
	err := proto.Unmarshal(data, in)
	if err = proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		out, err := srv.(BiohouseCometServer).ReqHurtPlayer(ctx, in)
		data, _ := proto.Marshal(out)
		return data, err
	}
	info := &comet.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biohouse.Biohouse/ReqHurtPlayer",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		out, err := srv.(BiohouseCometServer).ReqHurtPlayer(ctx, req.(*CSHurtPlayer))
		if out != nil {
			data, _ := proto.Marshal(out)
			return data, err
		}
		return nil, err
	}
	return interceptor(ctx, in, info, handler)
}
func _Comet_Biohouse_ReqPlayerHPChange_Handler(srv interface{}, ctx context.Context, data []byte, interceptor comet.UnaryServerInterceptor) ([]byte, error) {
	in := new(CSPlayerHPChange)
	err := proto.Unmarshal(data, in)
	if err = proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		out, err := srv.(BiohouseCometServer).ReqPlayerHPChange(ctx, in)
		data, _ := proto.Marshal(out)
		return data, err
	}
	info := &comet.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biohouse.Biohouse/ReqPlayerHPChange",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		out, err := srv.(BiohouseCometServer).ReqPlayerHPChange(ctx, req.(*CSPlayerHPChange))
		if out != nil {
			data, _ := proto.Marshal(out)
			return data, err
		}
		return nil, err
	}
	return interceptor(ctx, in, info, handler)
}

var _Comet_Biohouse_serviceDesc = comet.ServiceDesc{
	ServiceName: "biohouse.Biohouse",
	HandlerType: (*BiohouseCometServer)(nil),
	Methods: []comet.MethodDesc{
		{
			MethodName: "ReqPing",
			Handler:    _Comet_Biohouse_ReqPing_Handler,
			Ops:        1000,
		},
		{
			MethodName: "ReqLogin",
			Handler:    _Comet_Biohouse_ReqLogin_Handler,
			Ops:        1001,
		},
		{
			MethodName: "ReqLogout",
			Handler:    _Comet_Biohouse_ReqLogout_Handler,
			Ops:        1002,
		},
		{
			MethodName: "ReqAttack",
			Handler:    _Comet_Biohouse_ReqAttack_Handler,
			Ops:        1007,
		},
		{
			MethodName: "ReqMaterial",
			Handler:    _Comet_Biohouse_ReqMaterial_Handler,
			Ops:        1010,
		},
		{
			MethodName: "ReqChangeEquipWeaponID",
			Handler:    _Comet_Biohouse_ReqChangeEquipWeaponID_Handler,
			Ops:        1011,
		},
		{
			MethodName: "ReqChangeHandWeapon",
			Handler:    _Comet_Biohouse_ReqChangeHandWeapon_Handler,
			Ops:        1012,
		},
		{
			MethodName: "ReqChangeWeaponPart",
			Handler:    _Comet_Biohouse_ReqChangeWeaponPart_Handler,
			Ops:        1021,
		},
		{
			MethodName: "ReqUpgradeWeaponPart",
			Handler:    _Comet_Biohouse_ReqUpgradeWeaponPart_Handler,
			Ops:        1022,
		},
		{
			MethodName: "ReqWeaponReload",
			Handler:    _Comet_Biohouse_ReqWeaponReload_Handler,
			Ops:        1015,
		},
		{
			MethodName: "ReqAimMove",
			Handler:    _Comet_Biohouse_ReqAimMove_Handler,
			Ops:        1017,
		},
		{
			MethodName: "ReqAttackNull",
			Handler:    _Comet_Biohouse_ReqAttackNull_Handler,
			Ops:        1019,
		},
		{
			MethodName: "ReqChangeRatio",
			Handler:    _Comet_Biohouse_ReqChangeRatio_Handler,
			Ops:        1023,
		},
		{
			MethodName: "ReqEnterTable",
			Handler:    _Comet_Biohouse_ReqEnterTable_Handler,
			Ops:        1025,
		},
		{
			MethodName: "ReqLeaveTable",
			Handler:    _Comet_Biohouse_ReqLeaveTable_Handler,
			Ops:        1027,
		},
		{
			MethodName: "ReqUseSkill",
			Handler:    _Comet_Biohouse_ReqUseSkill_Handler,
			Ops:        1030,
		},
		{
			MethodName: "ReqHurtPlayer",
			Handler:    _Comet_Biohouse_ReqHurtPlayer_Handler,
			Ops:        1038,
		},
		{
			MethodName: "ReqPlayerHPChange",
			Handler:    _Comet_Biohouse_ReqPlayerHPChange_Handler,
			Ops:        1040,
		},
	},
}
